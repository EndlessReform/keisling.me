{
  "_from": "gatsby-transformer-json",
  "_id": "gatsby-transformer-json@2.3.1",
  "_inBundle": false,
  "_integrity": "sha512-iOXdbVRHjlhvWZ6sdPGmezZTwIXXsz8o3YT3/YrBobiYfwvgpGk5r/zrbyunv/ofscfduPg+veHW4lY52rw9Vg==",
  "_location": "/gatsby-transformer-json",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gatsby-transformer-json",
    "fetchSpec": "latest",
    "name": "gatsby-transformer-json",
    "raw": "gatsby-transformer-json",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gatsby-transformer-json/-/gatsby-transformer-json-2.3.1.tgz",
  "_shasum": "1415920c891f6b02a0118d43c6682e9e87f57835",
  "_shrinkwrap": null,
  "_spec": "gatsby-transformer-json",
  "_where": "/home/ritsuko/projects/keisling.me",
  "author": {
    "email": "mathews.kyle@gmail.com",
    "name": "Kyle Mathews"
  },
  "bugs": {
    "url": "https://github.com/gatsbyjs/gatsby/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@babel/runtime": "^7.8.7",
    "bluebird": "^3.7.2"
  },
  "deprecated": false,
  "description": "Gatsby transformer plugin for JSON files",
  "devDependencies": {
    "@babel/cli": "^7.8.4",
    "@babel/core": "^7.8.7",
    "babel-preset-gatsby-package": "^0.3.1",
    "cross-env": "^5.2.1"
  },
  "engines": {
    "node": ">=10.13.0"
  },
  "gitHead": "10722585e3544fd7672c6a262198461a6968b0eb",
  "homepage": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-json#readme",
  "keywords": [
    "gatsby",
    "gatsby-plugin",
    "json"
  ],
  "license": "MIT",
  "name": "gatsby-transformer-json",
  "optionalDependencies": {},
  "peerDependencies": {
    "gatsby": "^2.0.15"
  },
  "readme": "# gatsby-transformer-json\n\nParses raw JSON strings into JavaScript objects e.g. from JSON files. Supports\narrays of objects and single objects.\n\n## Install\n\n`npm install --save gatsby-transformer-json`\n\nIf you want to transform json files, you also need to have `gatsby-source-filesystem` installed and configured so it\npoints to your files.\n\n## How to use\n\nIn your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-transformer-json`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`,\n      },\n    },\n  ],\n}\n```\n\n## Parsing algorithm\n\nYou can choose to structure your data as arrays of objects in individual files\nor as single objects spread across multiple files.\n\n### Array of Objects\n\nThe algorithm for arrays is to convert each item in the array into a node.\n\nSo if your project has a `letters.json` with\n\n```json\n[{ \"value\": \"a\" }, { \"value\": \"b\" }, { \"value\": \"c\" }]\n```\n\nThen the following three nodes would be created:\n\n```json\n[{ \"value\": \"a\" }, { \"value\": \"b\" }, { \"value\": \"c\" }]\n```\n\n### Single Object\n\nThe algorithm for single JSON objects is to convert the object defined at the\nroot of the file into a node. The type of the node is based on the name of the\nparent directory.\n\nFor example, let's say your project has a data layout like:\n\n```text\ndata/\n    letters/\n        a.json\n        b.json\n        c.json\n```\n\nWhere each of `a.json`, `b.json` and `c.json` look like:\n\n```json\n{ \"value\": \"a\" }\n```\n\n```json\n{ \"value\": \"b\" }\n```\n\n```json\n{ \"value\": \"c\" }\n```\n\nThen the following three nodes would be created:\n\n```json\n[\n  {\n    \"value\": \"a\"\n  },\n  {\n    \"value\": \"b\"\n  },\n  {\n    \"value\": \"c\"\n  }\n]\n```\n\n## How to query\n\nRegardless of whether you choose to structure your data in arrays of objects or\nsingle objects, you'd be able to query your letters like:\n\n```graphql\n{\n  allLettersJson {\n    edges {\n      node {\n        value\n      }\n    }\n  }\n}\n```\n\nWhich would return:\n\n```javascript\n{\n  allLettersJson: {\n    edges: [\n      {\n        node: {\n          value: \"a\",\n        },\n      },\n      {\n        node: {\n          value: \"b\",\n        },\n      },\n      {\n        node: {\n          value: \"c\",\n        },\n      },\n    ]\n  }\n}\n```\n\n## Configuration options\n\n**`typeName`** [string|function][optional]\n\nThe default naming convention documented above can be changed with\neither a static string value (e.g. to be able to query all json with a\nsimple query):\n\n```javascript\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-json`,\n      options: {\n        typeName: `Json`, // a fixed string\n      },\n    },\n  ],\n}\n```\n\n```graphql\n{\n  allJson {\n    edges {\n      node {\n        value\n      }\n    }\n  }\n}\n```\n\nor a function that receives the following arguments:\n\n- `node`: the graphql node that is being processed, e.g. a File node with\n  json content\n- `object`: a single object (either an item from an array or the whole json content)\n- `isArray`: boolean, true if `object` is part of an array\n\n```json\n[\n  {\n    \"level\": \"info\",\n    \"message\": \"hurray\"\n  },\n  {\n    \"level\": \"info\",\n    \"message\": \"it works\"\n  },\n  {\n    \"level\": \"warning\",\n    \"message\": \"look out\"\n  }\n]\n```\n\n```javascript\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-json`,\n      options: {\n        typeName: ({ node, object, isArray }) => object.level,\n      },\n    },\n  ],\n}\n```\n\n```graphql\n{\n  allInfo {\n    edges {\n      node {\n        message\n      }\n    }\n  }\n}\n```\n\n## Examples\n\nThe [gatsbygram example site](https://github.com/gatsbyjs/gatsby/blob/master/examples/gatsbygram/gatsby-node.js) uses this plugin.\n\n## Troubleshooting\n\nIf some fields are missing or you see the error on build:\n\n> There are conflicting field types in your data. GraphQL schema will omit those fields.\n\nIt's probably because you have arrays of mixed values somewhere. For instance:\n\n```json\n{\n  \"stuff\": [25, \"bob\"],\n  \"orEven\": [\n    [25, \"bob\"],\n    [23, \"joe\"]\n  ]\n}\n```\n\nIf you can rewrite your data with objects, you should be good to go:\n\n```json\n{\n  \"stuff\": [{ \"count\": 25, \"name\": \"bob\" }],\n  \"orEven\": [\n    { \"count\": 25, \"name\": \"bob\" },\n    { \"count\": 23, \"name\": \"joe\" }\n  ]\n}\n```\n\nElse, if your data doesn't have a consistent schema, like [TopoJSON files](https://en.wikipedia.org/wiki/GeoJSON#TopoJSON), or you can't rewrite it, consider placing the JSON file inside the [`static` folder](/docs/static-folder/#when-to-use-the-static-folder) and use the dynamic import syntax (`import('/static/myjson.json')`) within the `componentDidMount` lifecycle or the `useEffect` hook.\n",
  "readmeFilename": "README.md",
  "repository": {
    "directory": "packages/gatsby-transformer-json",
    "type": "git",
    "url": "git+https://github.com/gatsbyjs/gatsby.git"
  },
  "scripts": {
    "build": "babel src --out-dir . --ignore **/__tests__",
    "prepare": "cross-env NODE_ENV=production npm run build",
    "watch": "babel -w src --out-dir . --ignore **/__tests__"
  },
  "version": "2.3.1"
}
